{
  "_args": [
    [
      {
        "raw": "promised-mongo@git+https://github.com/mindeavor/promised-mongo.git",
        "scope": null,
        "escapedName": "promised-mongo",
        "name": "promised-mongo",
        "rawSpec": "git+https://github.com/mindeavor/promised-mongo.git",
        "spec": "git+https://github.com/mindeavor/promised-mongo.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:mindeavor/promised-mongo.git",
          "sshUrl": "git+ssh://git@github.com/mindeavor/promised-mongo.git",
          "httpsUrl": "git+https://github.com/mindeavor/promised-mongo.git",
          "gitUrl": "git://github.com/mindeavor/promised-mongo.git",
          "shortcut": "github:mindeavor/promised-mongo",
          "directUrl": "https://raw.githubusercontent.com/mindeavor/promised-mongo/master/package.json"
        }
      },
      "/Users/aaronfigueroa/Desktop/rubix/redux/redux-example"
    ]
  ],
  "_from": "git+https://github.com/mindeavor/promised-mongo.git",
  "_id": "promised-mongo@1.2.0",
  "_inCache": true,
  "_location": "/promised-mongo",
  "_phantomChildren": {
    "core-util-is": "1.0.2",
    "inherits": "2.0.3"
  },
  "_requested": {
    "raw": "promised-mongo@git+https://github.com/mindeavor/promised-mongo.git",
    "scope": null,
    "escapedName": "promised-mongo",
    "name": "promised-mongo",
    "rawSpec": "git+https://github.com/mindeavor/promised-mongo.git",
    "spec": "git+https://github.com/mindeavor/promised-mongo.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:mindeavor/promised-mongo.git",
      "sshUrl": "git+ssh://git@github.com/mindeavor/promised-mongo.git",
      "httpsUrl": "git+https://github.com/mindeavor/promised-mongo.git",
      "gitUrl": "git://github.com/mindeavor/promised-mongo.git",
      "shortcut": "github:mindeavor/promised-mongo",
      "directUrl": "https://raw.githubusercontent.com/mindeavor/promised-mongo/master/package.json"
    }
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git+https://github.com/mindeavor/promised-mongo.git#7ceb91b19179560a025be8b723bebb14637590c7",
  "_shasum": "af912b5d1e3fb05dc988c166a073cd0f087304c3",
  "_shrinkwrap": null,
  "_spec": "promised-mongo@git+https://github.com/mindeavor/promised-mongo.git",
  "_where": "/Users/aaronfigueroa/Desktop/rubix/redux/redux-example",
  "author": {
    "name": "Gordon Mackenzie-Leigh",
    "email": "gordon@stugo.co.uk"
  },
  "bugs": {
    "url": "https://github.com/gordonmleigh/promised-mongo/issues"
  },
  "contributors": [
    {
      "name": "Gordon Mackenzie-Leigh",
      "email": "gordon@stugo.co.uk"
    }
  ],
  "dependencies": {
    "babel-runtime": "^5.5.5",
    "bluebird": "^2.9.27",
    "harmony-proxy": "0.0.2",
    "lodash": "^3.9.3",
    "mongodb-core": "^1.1.33",
    "parse-mongo-url": "^1.1.0",
    "readable-stream": "~1.1.8"
  },
  "description": "Easy to use module that implements the mongo api and supports promises",
  "devDependencies": {
    "babel": "^5.5.5",
    "chai": "^3.0.0",
    "grunt": "^0.4.5",
    "grunt-babel": "^5.0.1",
    "grunt-contrib-clean": "^0.6.0",
    "load-grunt-tasks": "^3.2.0"
  },
  "gitHead": "7ceb91b19179560a025be8b723bebb14637590c7",
  "homepage": "https://github.com/gordonmleigh/promised-mongo#readme",
  "keywords": [
    "mongo",
    "db",
    "mongodb",
    "promise",
    "q"
  ],
  "license": "MIT",
  "name": "promised-mongo",
  "optionalDependencies": {},
  "readme": "**This is a modified version of [promised-mongo](https://github.com/gordonmleigh/promised-mongo) that provide the option of using SCRAM-SHA-1 as authentication mechanism to connect to a remote database.**\n\n**As of MongoDB 3.0, SCRAM-SHA-1 is the [default authentication mechanism](https://docs.mongodb.com/manual/core/security-scram-sha-1/#authentication-scram-sha-1), and should resolve connection auth error to [mLab databases](https://github.com/gordonmleigh/promised-mongo/pull/36) and elsewhere**\n\n\n###### changes to the original readme is denoted with ~~strikethrough~~ \n\n<a href=\"http://promises-aplus.github.com/promises-spec\">\n    <img src=\"http://promises-aplus.github.com/promises-spec/assets/logo-small.png\"\n         align=\"right\" alt=\"Promises/A+ logo\" />\n</a>\n\n# promised-mongo\n\nA complete rewrite of [mongojs](https://github.com/mafintosh/mongojs) to support promises.  In a\nbreak with previous versions, this library only supports promises, and not callbacks.\n\n\n## Install\n\npromised-mongo is available through [npm](http://npmjs.org):\n\n__it appears the author is no longer working on the [original repo](https://github.com/gordonmleigh/promised-mongo) as PR sits for months__\n\n\n>~~npm install promised-mongo~~\n\n\n__instead use the following__\n\n\t\n\tnpm install https://github.com/mindeavor/promised-mongo\n\n\n## Compatability with previous versions\n\nI no longer use [Q](https://github.com/kriskowal/q) for promises.  This means that you can't  use\n`.done()` at the end of promise chains.  To turn on compatability with previous versions, you can\ncall the `compatible()` function:\n\n```js\nvar pmongo = require('promised-mongo').compatible();\n```\n\nOther than dropping support for callbacks, I have tried to make sure that the new library is\ncompatible with the old tests (see the legacy_tests folder).\n\n\n## How I write JavaScript\n\nI like using [async functions](https://github.com/lukehoban/ecmascript-asyncawait) from current\nEMCAScript proposals.  This makes node amazingly easier to understand.  An example from the tests:\n\n```js\nit('returns all documents', async function () {\n  let docs = [{hello: 'world'}, {hello: 'kitty'}];\n  await collection.insert(docs);\n  let cursor = collection.find();\n  expect(cursor).to.be.an.instanceof(Cursor);\n  let result = await cursor.toArray();\n  expect(result).to.deep.have.members(docs);\n});\n```\n\nIsn't it so much easier to understand?  The downsides (of course there had to be some) is that since\nthis is so bleeding edge, editor support and debugging support are varied and patchy, and there's a\nchance that the feature won't even make it to the final language specification.\n\nThis is compiled to ES5 using [babel](https://babeljs.io/).\n\n\n## Documentation\n\nThe documentation below refers to an older version.  Most of it should still work the same however.\nWatch this space for improvements.\n\n\n## Usage\n\nUse promised-mongo just like mongojs, except that you use the returned promise instead of a\ncallback.\n\n```js\nvar pmongo = require('promised-mongo');\nvar db = pmongo(connectionString, [collections]);\n```\n\nThe connection string should follow the format desribed in\n[the mongo connection string docs](http://docs.mongodb.org/manual/reference/connection-string/).\nSome examples of this could be:\n\n``` js\n// simple usage for a local db\nvar db = pmongo('mydb', ['mycollection']);\n\n// the db is on a remote server (the port default to mongo)\nvar db = pmongo('example.com/mydb', ['mycollection']);\n\n//optionally pass in an option object specifying the use of SCRAM-SHA-1 for connecting to remote MongoDB running v3.0 or above\nvar db = pmongo('example.com/mydb', ['mycollection'],{authMechanism: 'ScramSHA1'});\n// we can also provide some credentials\nvar db = pmongo('username:password@example.com/mydb', ['mycollection'],{authMechanism: 'ScramSHA1'});\n\n// connect now, and worry about collections later\nvar db = pmongo('mydb');\nvar mycollection = db.collection('mycollection');\n```\n\nAfter we connected we can query or update the database just how we would using the mongo API with the exception that the functions return\na promise for the result rather than the result itself.  Cursor operations such as `find()` and `sort()` return a **cursor**; to get a\npromise for the result, you have to force evaluation using `toArray()`.  Alternatively, you can just call `then()` on the cursor and it will call `toArray()` for you, returning a promise.  The function `findOne()` returns a promise immediately, not a cursor.\nNote that due to [limitations in the Q promise library](https://github.com/kriskowal/q/#the-end), you should call `.done()` at the end of\nany promise chain you aren't returning, in order to throw any uncaught exceptions.  For brevity, the examples in this readme don't do that.\n\n``` js\n// find everything\ndb.mycollection.find().toArray().then(function(docs){\n\t// docs is an array of all the documents in mycollection\n});\n\n// find everything, but sort by name\ndb.mycollection.find().sort({name:1}).toArray().then(function(docs) {\n\t// docs is now a sorted array\n});\n\n// find a document using a native ObjectId\ndb.mycollection.findOne({\n\t_id: pmongo.ObjectId('523209c4561c640000000001')\n}).then(function(doc) {\n\t// doc._id.toString() === '523209c4561c640000000001'\n});\n\n// find all named 'mathias' and increment their level\ndb.mycollection.update({name:'mathias'}, {$inc:{level:1}}, {multi:true})\n\t.then(function(lastErrorObject) {\n\t\t// the update is complete\n\t});\n\n// find one named 'mathias', tag him as a contributor and return the modified doc\ndb.mycollection.findAndModify({\n\tquery: { name: 'mathias' },\n\tupdate: { $set: { tag:'maintainer' } },\n\tnew: true\n})\n.then(function(doc) {\n\t// doc.tag === 'maintainer'\n});\n\n// use the save function to just save a document\ndb.mycollection.save({created:'just now'});\n\n```\n\nThe `forEach` function is a special case.  The library supports the mongojs style:\n\n``` js\n// iterate over all whose level is greater than 90.\ndb.mycollection.find({level:{$gt:90}}).forEach(function(err, doc) {\n\tif (doc) {\n      //do things with doc\n    } else {\n      //the callback gets called at the end with a null doc\n      console.log('Finished!');\n    }\n});\n```\n\nIt also supports a promise version.  If you pass a callback to the `forEach` function with only one argument, you get the promise version.  The promise will resolve (with `undefined`) when the callback has been called for all documents.\n\n``` js\n// iterate over all whose level is greater than 90 (promise version)\ndb.mycollection.find({level:{$gt:90}}).forEach(function(doc) {\n\t//do things with doc\n})\n.then(function () {\n  console.log('Finished!');\n});\n```\n\nTo access `lastErrorObject` returned by `findAndModify` using the promises API, use the `findAndModifyEx` function:\n\n```\ndb.mycollection.findAndModifyEx({\n\tquery: { name: 'mathias' },\n\tupdate: { $set: { tag:'maintainer' } },\n\tnew: true\n})\n.then(function(result) {\n\tvar doc = result.result;\n\tvar lastErrorObject = result.lastErrorObject;\n});\n```\n\nIf you provide a callback to `find` or any cursor config operation mongojs will call `toArray` for you\n\n``` js\ndb.mycollection.find({}, function(err, docs) { ... });\n\ndb.mycollection.find({}).limit(2).skip(1, function(err, docs) { ... });\n```\nis the same as\n\n``` js\ndb.mycollection.find({}).toArray(function(err, docs) { ... });\n\ndb.mycollection.find({}).limit(2).skip(1).toArray(function(err, docs) { ... });\n```\n\nIf you are using the promises API, **you must call toArray() on cursors** before a promise can be obtained.  E.g.:\n\n```\ndb.mycollection.find().limit(2).skip(1).toArray()\n\t.then(function (docs) {\n\t\t// ...\n\t});\n```\n\nFor more detailed information about the different usages of update and querying see [the mongo docs](http://www.mongodb.org/display/DOCS/Manual)\n\n## Streaming cursors\n\nAs of `0.7.0` all cursors are a [readable stream](http://nodejs.org/api/stream.html#stream_readable_stream) of objects.\n\n``` js\nvar JSONStream = require('JSONStream');\n\n// pipe all documents in mycollection to stdout\ndb.mycollection.find({}).pipe(JSONStream.stringify()).pipe(process.stdout);\n```\n\nNotice that you should pipe the cursor through a stringifier (like [JSONStream](https://github.com/dominictarr/JSONStream))\nif you want to pipe it to a serial stream like a http response.\n\n## Tailable cursors\n\nIf you are using a capped collection you can create a [tailable cursor](http://docs.mongodb.org/manual/tutorial/create-tailable-cursor/) to that collection by adding `tailable:true` to the find options\n\n``` js\nvar cursor = db.mycollection.find({}, {}, {tailable:true, timeout:false});\n\n// since all cursors are streams we can just listen for data\ncursor.on('data', function(doc) {\n\tconsole.log('new document', doc);\n});\n```\n\nNote that you need to explicitly set the selection parameter in the `find` call.\n\n## Database commands\n\nWith promised-mongo you can run database commands just like with the mongo shell using `db.runCommand()`\n\n```js\ndb.runCommand({ping:1}).then(function(res) {\n\tif(res.ok) console.log(\"we're up\");\n}).catch(function(err){\n\tif(err) console.log(\"we aren't up\", err);\n});\n```\n\nor `db.collection.runCommand()`\n\n```js\ndb.things.runCommand('count').then(function(res) {\n\tconsole.log(res);\n});\n```\n\n## Replication Sets\n\nPromised-mongo can also connect to a mongo replication set by providing a connection string with multiple hosts\n\n``` js\nvar db = pmongo('rs-1.com,rs-2.com,rs-3.com/mydb?slaveOk=true', ['mycollection']);\n```\n\nFor more detailed information about replica sets see [the mongo replication docs](http://www.mongodb.org/display/DOCS/Replica+Sets)\n\n# API\n\nThis API documentation is a work in progress.  To maintain compatibility with mongojs,\nall functions can accept a callback.  If no callback is specified, a promise is returned.\n\n#### Collection\n\n#####`db.collection.aggregate([pipeline], callback)`\n\n#####`db.collection.count([query], callback)`\n\n#####`db.collection.createIndex(keys, options, [callback])`\n\n#####`db.collection.distinct(field, query, callback)`\n\n#####`db.collection.drop([callback])`\n\n#####`db.collection.dropIndex(index, [callback])`\n\n#####`db.collection.dropIndexes([callback])`\n\n#####`db.collection.ensureIndex(keys, options, [callback])`\n\n#####`db.collection.find([criteria], [projection], [callback])`\n\nThis function applies a query to a collection. You can get the return value, which is a cursor, or pass a callback\nas the last parameter. Said callback receives `(err, documents)`\n\n#####`db.collection.findOne([criteria], [projection], callback)`\n\nApply a query and get one single document passed as a callback. The callback receives `(err, document)`\n\n#####`db.collection.findAndModify(document, callback)`\n\n#####`db.collection.getIndexes(callback)`\n\n#####`db.collection.group(document, callback)`\n\n#####`db.collection.insert(docOrDocs, callback)`\n\n#####`db.collection.isCapped(callback)`\n\n#####`db.collection.mapReduce(map, reduce, options, callback)`\n\n#####`db.collection.reIndex(callback)`\n\n#####`db.collection.remove(query, [justOne], [callback])`\n\n#####`db.collection.runCommand(command, callback)`\n\n#####`db.collection.save(doc, callback)`\n\n#####`db.collection.stats(callback)`\n\n#####`db.collection.update(query, update, [options], callback)`\n\n#### Cursor\n\n#####`cursor.batchSize(size, [callback])`\n\n#####`cursor.count(callback)`\n\n#####`cursor.explain(callback)`\n\n#####`cursor.forEach(function)`\n\n#####`cursor.limit(n, [callback])`\n\n#####`cursor.map(function, [callback])`\n\n#####`cursor.next(callback)`\n\n#####`cursor.skip(n, [callback])`\n\n#####`cursor.sort(sortOptions, [callback])`\n\n#####`cursor.toArray(callback)`\n\n#### Database\n\n#####`db.addUser(document)`\n\n#####`db.createCollection(name, options, [callback])`\n\n#####`db.dropDatabase([callback])`\n\n#####`db.eval(function, arguments)`\n\n#####`db.getCollectionNames([callback])`\n\n#####`db.getLastError([callback])`\n\n#####`db.getLastErrorObj([callback])`\n\n#####`db.removeUser(username, [callback])`\n\n#####`db.runCommand(command, [callback])`\n\n#####`db.stats([callback])`\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/gordonmleigh/promised-mongo.git"
  },
  "scripts": {
    "main": "dist/index.js",
    "test": "mocha"
  },
  "version": "1.2.0"
}
